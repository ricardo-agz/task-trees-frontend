{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Desktop\\\\School\\\\Research\\\\NLP\\\\WikiHow\\\\visualizer\\\\src\\\\views\\\\View.js\";\nimport React, { useEffect } from \"react\";\nimport { setSearch } from \"../application/actions/Search\";\nimport { goBack, selectChild, setCurrNode } from \"../application/actions/Graph\";\nimport { connect } from \"react-redux\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport \"./Styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction View(props) {\n  function hasChildren(step) {\n    return !isNaN(parseInt(step));\n  }\n\n  function handleCallNode(node) {\n    props.setCurrNode(format(node));\n\n    for (let child of props.currNode.children) {}\n  }\n\n  const format = s => {\n    if (typeof s !== 'string') return '';\n    s = s.toLowerCase();\n\n    if (s.charAt(s.length - 1) === \".\") {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    } else {\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\";\n    }\n  };\n\n  function makeTree() {\n    let tree = {};\n\n    if (props.currNode !== null) {\n      tree = {\n        root: {\n          goal: props.currNode.goal,\n          children: []\n        }\n      };\n\n      for (let i = 0; i < props.currNode.children.length; i++) {}\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {JSON.stringify(props.currNode)}\n    //   <div style={{color: \"white\"}}>\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\n    //     {props.currNode !== null && props.currNode.children &&\n    //       <div>\n    //         {props.currNode.children.map((child) => (\n    //           <div>\n    //             {child}\n    //           </div>\n    //         ))}\n    //       </div>\n    //     }\n    //   </div>\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\n    //   {/*  <div>*/}\n    //   {/*    {props.currNode.children.map((child) => (*/}\n    //   {/*      <div>*/}\n    //   {/*        Bruh*/}\n    //   {/*        {JSON.stringify(child)}*/}\n    //   {/*      </div>*/}\n    //   {/*    ))}*/}\n    //   {/*  </div>*/}\n    //   {/*}*/}\n    // </div>\n    _jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100vw\",\n          height: 35,\n          display: \"flex\",\n          overflow: \"hidden\",\n          overflowX: \"scroll\",\n          marginTop: 10,\n          marginBottom: 10\n        },\n        className: \"scrollView\",\n        children: props.graphData.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"rgb(6,98,191)\",\n            padding: 15,\n            borderRadius: 50,\n            color: \"white\",\n            maxWidth: \"300px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            flexGrow: 0,\n            flexShrink: 0,\n            marginLeft: 5,\n            marginRight: 5\n          },\n          onClick: () => handleCallNode(node.goal),\n          children: node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this) // <ScrollNode node={node}/>\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flex: 1,\n          height: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: [props.prevNodeStack.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => props.goBack(),\n            className: \"backButton\",\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n              style: {\n                color: \"white\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this), props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              // backgroundColor: \"#2b56d2\",\n              backgroundColor: \"rgb(6,98,191)\",\n              padding: 15,\n              borderRadius: 50,\n              color: \"white\"\n            },\n            children: props.currNode == null ? \"null\" : props.currNode.goal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: props.currNode.children.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  alignItems: \"center\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    backgroundColor: \"rgb(6,98,191)\",\n                    padding: 15,\n                    borderRadius: 50,\n                    color: \"white\",\n                    margin: 10\n                  },\n                  children: hasChildren(step) ? props.graphData[parseInt(step)].goal : step\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 17\n                }, this), hasChildren(step) && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plusButton\",\n                  onClick: () => props.selectChild(parseInt(step)),\n                  children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                    style: {\n                      color: \"white\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)\n  );\n}\n/* Redux */\n\n\n_c = View;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.searchReducer.search,\n    currNode: state.graphReducer.currNode,\n    prevNodeStack: state.graphReducer.prevNodeStack,\n    parsedData: state.graphReducer.parsedData,\n    graphData: state.graphReducer.graphData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callSearch: search => dispatch(setSearch(search)),\n    setCurrNode: search => dispatch(setCurrNode(search)),\n    selectChild: i => dispatch(selectChild(i)),\n    goBack: () => dispatch(goBack())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/views/View.js"],"names":["React","useEffect","setSearch","goBack","selectChild","setCurrNode","connect","AddIcon","ChevronLeftIcon","View","props","hasChildren","step","isNaN","parseInt","handleCallNode","node","format","child","currNode","children","s","toLowerCase","charAt","length","toUpperCase","slice","makeTree","tree","root","goal","i","height","flex","width","display","overflow","overflowX","marginTop","marginBottom","graphData","map","backgroundColor","padding","borderRadius","color","maxWidth","alignItems","flexGrow","flexShrink","marginLeft","marginRight","justifyContent","prevNodeStack","index","margin","mapStateToProps","state","search","searchReducer","graphReducer","parsedData","mapDispatchToProps","dispatch","callSearch"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\"\r\nimport {setSearch} from \"../application/actions/Search\";\r\nimport {goBack, selectChild, setCurrNode} from \"../application/actions/Graph\";\r\nimport {connect} from \"react-redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport \"./Styles.css\"\r\n\r\nfunction View(props) {\r\n  function hasChildren(step) {\r\n    return !isNaN(parseInt(step))\r\n  }\r\n\r\n  function handleCallNode(node) {\r\n    props.setCurrNode(format(node))\r\n\r\n    for (let child of props.currNode.children) {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  const format = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    s =  s.toLowerCase()\r\n    if (s.charAt(s.length - 1) === \".\") {\r\n      return s.charAt(0).toUpperCase() + s.slice(1)\r\n    } else {\r\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\"\r\n    }\r\n  }\r\n\r\n  function makeTree() {\r\n    let tree = {}\r\n    if (props.currNode !== null) {\r\n      tree = {\r\n        root: {\r\n          goal: props.currNode.goal,\r\n          children: []\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < props.currNode.children.length; i++) {\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    // <div>\r\n    //   {JSON.stringify(props.currNode)}\r\n    //   <div style={{color: \"white\"}}>\r\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\r\n    //     {props.currNode !== null && props.currNode.children &&\r\n    //       <div>\r\n    //         {props.currNode.children.map((child) => (\r\n    //           <div>\r\n    //             {child}\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     }\r\n    //   </div>\r\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\r\n    //   {/*  <div>*/}\r\n    //   {/*    {props.currNode.children.map((child) => (*/}\r\n    //   {/*      <div>*/}\r\n    //   {/*        Bruh*/}\r\n    //   {/*        {JSON.stringify(child)}*/}\r\n    //   {/*      </div>*/}\r\n    //   {/*    ))}*/}\r\n    //   {/*  </div>*/}\r\n    //   {/*}*/}\r\n    // </div>\r\n\r\n    <div style={{height: \"100%\", flex: 1}}>\r\n\r\n      <div style={{width: \"100vw\", height: 35, display: \"flex\", overflow: \"hidden\", overflowX: \"scroll\", marginTop: 10, marginBottom: 10}}\r\n      className={\"scrollView\"}>\r\n        {props.graphData.map((node) => (\r\n            <div\r\n              style={{\r\n                backgroundColor: \"rgb(6,98,191)\",\r\n                padding: 15, borderRadius: 50, color: \"white\",\r\n                maxWidth: \"300px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexGrow: 0,\r\n                flexShrink: 0,\r\n                marginLeft: 5,\r\n                marginRight: 5\r\n              }}\r\n              onClick={() => handleCallNode(node.goal)}\r\n            >{node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal}</div>\r\n            // <ScrollNode node={node}/>\r\n        ))}\r\n      </div>\r\n\r\n      <div style={{display: \"flex\", flex: 1, height: \"100%\"}}>\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n\r\n          {props.prevNodeStack.length > 0 &&\r\n          <div\r\n            onClick={() => props.goBack()}\r\n            className={\"backButton\"}\r\n          >\r\n            <ChevronLeftIcon style={{color: \"white\"}}/>\r\n          </div>\r\n          }\r\n\r\n          {props.currNode !== null && typeof props.currNode !== \"string\" &&\r\n            <div\r\n              style={{\r\n                // backgroundColor: \"#2b56d2\",\r\n                backgroundColor: \"rgb(6,98,191)\",\r\n                padding: 15, borderRadius: 50, color: \"white\"\r\n              }}\r\n            >{props.currNode == null ? \"null\" : props.currNode.goal}</div>\r\n          }\r\n        </div>\r\n\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n          <div>{\r\n            props.currNode !== null && typeof(props.currNode) !== \"string\" &&\r\n            <div>{props.currNode.children.map((step, index) => (\r\n              <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <div\r\n                  style={{backgroundColor: \"rgb(6,98,191)\", padding: 15, borderRadius: 50, color: \"white\", margin: 10}}\r\n                >\r\n\r\n                { hasChildren(step) ?\r\n                  props.graphData[parseInt(step)].goal : step\r\n                }\r\n                </div>\r\n\r\n                {hasChildren(step) &&\r\n                  <div\r\n                    className={\"plusButton\"}\r\n                    onClick={() => props.selectChild(parseInt(step))}\r\n                  >\r\n                    <AddIcon style={{color: \"white\"}}/>\r\n                  </div>\r\n                }\r\n              </div>\r\n            ))}</div>\r\n          }</div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n/* Redux */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchReducer.search,\r\n    currNode: state.graphReducer.currNode,\r\n    prevNodeStack: state.graphReducer.prevNodeStack,\r\n    parsedData: state.graphReducer.parsedData,\r\n    graphData: state.graphReducer.graphData\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    callSearch: (search) => dispatch(setSearch(search)),\r\n    setCurrNode: (search) => dispatch(setCurrNode(search)),\r\n    selectChild: (i) => dispatch(selectChild(i)),\r\n    goBack: () => dispatch(goBack())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View)\r\n"]},"metadata":{},"sourceType":"module"}