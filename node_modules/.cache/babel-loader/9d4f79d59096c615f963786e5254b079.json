{"ast":null,"code":"import { GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH } from \"../Types\";\nimport { TestData } from \"../TestData\";\nconst initialState = {\n  currNode: null,\n  prevNodeStack: [],\n  graphData: TestData\n};\n\nconst graphReducer = (state = initialState, action) => {\n  function bfs() {\n    let queue = [];\n\n    for (let i = 0; i < state.graphData.length; i++) {\n      queue.push(state.graphData[i]);\n    }\n  }\n\n  switch (action.type) {\n    case GOBACK:\n      return { ...state,\n        currNode: state.prevNodeStack.pop()\n      };\n\n    case SELECTCHILD:\n      return { ...state,\n        prevNodeStack: state.prevNodeStack.push(currNode),\n        currNode: state.currNode.steps[action.data]\n      };\n\n    case SETCURRNODE:\n      return { ...state,\n        prevNode: null,\n        currNode: state.graphData[0]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default graphReducer;","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/application/reducers/GraphReducer.js"],"names":["GOBACK","SELECTCHILD","SETCURRNODE","SETSEARCH","TestData","initialState","currNode","prevNodeStack","graphData","graphReducer","state","action","bfs","queue","i","length","push","type","pop","steps","data","prevNode"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,SAA1C,QAA0D,UAA1D;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,SAAS,EAAEJ;AAHQ,CAArB;;AAMA,MAAMK,YAAY,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,WAASC,GAAT,GAAe;AACb,QAAIC,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACF,SAAN,CAAgBO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CD,MAAAA,KAAK,CAACG,IAAN,CAAWN,KAAK,CAACF,SAAN,CAAgBM,CAAhB,CAAX;AACD;AAGF;;AAED,UAAQH,MAAM,CAACM,IAAf;AACE,SAAKjB,MAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,QAAQ,EAAEI,KAAK,CAACH,aAAN,CAAoBW,GAApB;AAFL,OAAP;;AAIF,SAAKjB,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBS,IAApB,CAAyBV,QAAzB,CAFV;AAGLA,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAea,KAAf,CAAqBR,MAAM,CAACS,IAA5B;AAHL,OAAP;;AAKF,SAAKlB,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELW,QAAAA,QAAQ,EAAE,IAFL;AAGLf,QAAAA,QAAQ,EAAEI,KAAK,CAACF,SAAN,CAAgB,CAAhB;AAHL,OAAP;;AAKF;AACE,aAAOE,KAAP;AAnBJ;AAqBD,CAhCD;;AAkCA,eAAeD,YAAf","sourcesContent":["import {GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH} from \"../Types\";\r\nimport {TestData} from \"../TestData\";\r\n\r\nconst initialState = {\r\n  currNode: null,\r\n  prevNodeStack: [],\r\n  graphData: TestData\r\n}\r\n\r\nconst graphReducer = (state = initialState, action) => {\r\n  function bfs() {\r\n    let queue = [];\r\n\r\n    for (let i = 0; i < state.graphData.length; i++) {\r\n      queue.push(state.graphData[i]);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  switch (action.type) {\r\n    case GOBACK:\r\n      return {\r\n        ...state,\r\n        currNode: state.prevNodeStack.pop()\r\n      }\r\n    case SELECTCHILD:\r\n      return {\r\n        ...state,\r\n        prevNodeStack: state.prevNodeStack.push(currNode),\r\n        currNode: state.currNode.steps[action.data]\r\n      }\r\n    case SETCURRNODE:\r\n      return {\r\n        ...state,\r\n        prevNode: null,\r\n        currNode: state.graphData[0]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default graphReducer\r\n"]},"metadata":{},"sourceType":"module"}