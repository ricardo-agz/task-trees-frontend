{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Desktop\\\\School\\\\Research\\\\NLP\\\\WikiHow\\\\visualizer\\\\src\\\\views\\\\View.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { setSearch } from \"../application/actions/Search\";\nimport { goBack, selectChild, setCurrNode } from \"../application/actions/Graph\";\nimport { connect } from \"react-redux\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport \"./Styles.css\"; // import Tree from 'react-tree-graph';\n\nimport Tree from 'react-d3-tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction View(props) {\n  _s();\n\n  const [tree, setTree] = useState(null);\n  useEffect(() => {\n    makeTree();\n  }, [props.currNode]);\n\n  function hasChildren(step) {\n    return !isNaN(parseInt(step));\n  }\n\n  function handleCallNode(node) {\n    props.setCurrNode(format(node));\n  }\n\n  const format = s => {\n    if (typeof s !== 'string') return '';\n    s = s.toLowerCase();\n\n    if (s.charAt(s.length - 1) === \".\") {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    } else {\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\";\n    }\n  };\n\n  function makeTree() {\n    let tree = {};\n\n    if (props.currNode !== null) {\n      tree = {\n        name: props.currNode.goal,\n        children: []\n      };\n\n      for (let i = 0; i < props.currNode.children.length; i++) {\n        let child = props.currNode.children[i];\n\n        if (hasChildren(child)) {\n          tree.children[i] = {\n            name: props.graphData[parseInt(child)].goal,\n            children: []\n          };\n\n          for (let j = 0; j < props.graphData[parseInt(child)].children.length; j++) {\n            let subChild = props.graphData[parseInt(child)].children[j];\n\n            if (hasChildren(subChild)) {\n              tree.children[i].children[j] = {\n                name: props.graphData[parseInt(subChild)].goal,\n                children: []\n              };\n            } else {\n              tree.children[i].children[j] = {\n                name: subChild // children: null\n\n              };\n            }\n          }\n        } else {\n          tree.children[i] = {\n            name: child // children: null\n\n          };\n        }\n      }\n    }\n\n    setTree(tree);\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {JSON.stringify(props.currNode)}\n    //   <div style={{color: \"white\"}}>\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\n    //     {props.currNode !== null && props.currNode.children &&\n    //       <div>\n    //         {props.currNode.children.map((child) => (\n    //           <div>\n    //             {child}\n    //           </div>\n    //         ))}\n    //       </div>\n    //     }\n    //   </div>\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\n    //   {/*  <div>*/}\n    //   {/*    {props.currNode.children.map((child) => (*/}\n    //   {/*      <div>*/}\n    //   {/*        Bruh*/}\n    //   {/*        {JSON.stringify(child)}*/}\n    //   {/*      </div>*/}\n    //   {/*    ))}*/}\n    //   {/*  </div>*/}\n    //   {/*}*/}\n    // </div>\n    _jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100vw\",\n          height: 35,\n          display: \"flex\",\n          overflow: \"hidden\",\n          overflowX: \"scroll\",\n          marginTop: 10,\n          marginBottom: 10\n        },\n        className: \"scrollView\",\n        children: props.graphData.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"rgb(6,98,191)\",\n            padding: 15,\n            borderRadius: 50,\n            color: \"white\",\n            maxWidth: \"300px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            flexGrow: 0,\n            flexShrink: 0,\n            marginLeft: 5,\n            marginRight: 5\n          },\n          onClick: () => handleCallNode(node.goal),\n          children: node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this) // <ScrollNode node={node}/>\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this), tree && tree !== {} && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100vw',\n          height: '90vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: tree,\n          renderCustomNodeElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: 30,\n              height: 30,\n              backgroundColor: \"red\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 38\n          }, this) // height={800}\n          // width={800}\n          // animated\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)\n  );\n}\n/* Redux */\n\n\n_s(View, \"C2wasZ4/w/uTJY5LyroNkQBd1w0=\");\n\n_c = View;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.searchReducer.search,\n    currNode: state.graphReducer.currNode,\n    prevNodeStack: state.graphReducer.prevNodeStack,\n    parsedData: state.graphReducer.parsedData,\n    graphData: state.graphReducer.graphData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callSearch: search => dispatch(setSearch(search)),\n    setCurrNode: search => dispatch(setCurrNode(search)),\n    selectChild: i => dispatch(selectChild(i)),\n    goBack: () => dispatch(goBack())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/views/View.js"],"names":["React","useEffect","useState","setSearch","goBack","selectChild","setCurrNode","connect","AddIcon","ChevronLeftIcon","Tree","View","props","tree","setTree","makeTree","currNode","hasChildren","step","isNaN","parseInt","handleCallNode","node","format","s","toLowerCase","charAt","length","toUpperCase","slice","name","goal","children","i","child","graphData","j","subChild","height","flex","width","display","overflow","overflowX","marginTop","marginBottom","map","backgroundColor","padding","borderRadius","color","maxWidth","alignItems","flexGrow","flexShrink","marginLeft","marginRight","mapStateToProps","state","search","searchReducer","graphReducer","prevNodeStack","parsedData","mapDispatchToProps","dispatch","callSearch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport {setSearch} from \"../application/actions/Search\";\r\nimport {goBack, selectChild, setCurrNode} from \"../application/actions/Graph\";\r\nimport {connect} from \"react-redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport \"./Styles.css\"\r\n// import Tree from 'react-tree-graph';\r\nimport Tree from 'react-d3-tree';\r\n\r\nfunction View(props) {\r\n  const [tree, setTree] = useState(null)\r\n\r\n  useEffect(() => {\r\n    makeTree()\r\n  }, [props.currNode])\r\n\r\n  function hasChildren(step) {\r\n    return !isNaN(parseInt(step))\r\n  }\r\n\r\n  function handleCallNode(node) {\r\n    props.setCurrNode(format(node))\r\n  }\r\n\r\n  const format = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    s =  s.toLowerCase()\r\n    if (s.charAt(s.length - 1) === \".\") {\r\n      return s.charAt(0).toUpperCase() + s.slice(1)\r\n    } else {\r\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\"\r\n    }\r\n  }\r\n\r\n  function makeTree() {\r\n    let tree = {}\r\n    if (props.currNode !== null) {\r\n      tree = {\r\n        name: props.currNode.goal,\r\n        children: []\r\n      }\r\n\r\n      for (let i = 0; i < props.currNode.children.length; i++) {\r\n        let child = props.currNode.children[i]\r\n        if (hasChildren(child)) {\r\n          tree.children[i] = {\r\n            name: props.graphData[parseInt(child)].goal,\r\n            children: []\r\n          };\r\n          for (let j = 0; j < props.graphData[parseInt(child)].children.length; j++) {\r\n            let subChild = props.graphData[parseInt(child)].children[j]\r\n            if (hasChildren(subChild)) {\r\n              tree.children[i].children[j] = {\r\n                name: props.graphData[parseInt(subChild)].goal,\r\n                children: []\r\n              };\r\n            } else {\r\n              tree.children[i].children[j] = {\r\n                name: subChild,\r\n                // children: null\r\n              };\r\n            }\r\n          }\r\n        } else {\r\n          tree.children[i] = {\r\n            name: child,\r\n            // children: null\r\n          };\r\n        }\r\n      }\r\n    }\r\n    setTree(tree)\r\n  }\r\n\r\n  return (\r\n    // <div>\r\n    //   {JSON.stringify(props.currNode)}\r\n    //   <div style={{color: \"white\"}}>\r\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\r\n    //     {props.currNode !== null && props.currNode.children &&\r\n    //       <div>\r\n    //         {props.currNode.children.map((child) => (\r\n    //           <div>\r\n    //             {child}\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     }\r\n    //   </div>\r\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\r\n    //   {/*  <div>*/}\r\n    //   {/*    {props.currNode.children.map((child) => (*/}\r\n    //   {/*      <div>*/}\r\n    //   {/*        Bruh*/}\r\n    //   {/*        {JSON.stringify(child)}*/}\r\n    //   {/*      </div>*/}\r\n    //   {/*    ))}*/}\r\n    //   {/*  </div>*/}\r\n    //   {/*}*/}\r\n    // </div>\r\n\r\n    <div style={{height: \"100%\", flex: 1}}>\r\n\r\n      <div style={{width: \"100vw\", height: 35, display: \"flex\", overflow: \"hidden\", overflowX: \"scroll\", marginTop: 10, marginBottom: 10}}\r\n      className={\"scrollView\"}>\r\n        {props.graphData.map((node) => (\r\n            <div\r\n              style={{\r\n                backgroundColor: \"rgb(6,98,191)\",\r\n                padding: 15, borderRadius: 50, color: \"white\",\r\n                maxWidth: \"300px\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                flexGrow: 0,\r\n                flexShrink: 0,\r\n                marginLeft: 5,\r\n                marginRight: 5\r\n              }}\r\n              onClick={() => handleCallNode(node.goal)}\r\n            >{node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal}</div>\r\n            // <ScrollNode node={node}/>\r\n        ))}\r\n      </div>\r\n\r\n      {/*<div style={{display: \"flex\", flex: 1, height: \"100%\"}}>*/}\r\n      {/*  <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>*/}\r\n\r\n      {/*    {props.prevNodeStack.length > 0 &&*/}\r\n      {/*    <div*/}\r\n      {/*      onClick={() => props.goBack()}*/}\r\n      {/*      className={\"backButton\"}*/}\r\n      {/*    >*/}\r\n      {/*      <ChevronLeftIcon style={{color: \"white\"}}/>*/}\r\n      {/*    </div>*/}\r\n      {/*    }*/}\r\n\r\n      {/*    {props.currNode !== null && typeof props.currNode !== \"string\" &&*/}\r\n      {/*      <div*/}\r\n      {/*        style={{*/}\r\n      {/*          // backgroundColor: \"#2b56d2\",*/}\r\n      {/*          backgroundColor: \"rgb(6,98,191)\",*/}\r\n      {/*          padding: 15, borderRadius: 50, color: \"white\"*/}\r\n      {/*        }}*/}\r\n      {/*      >{props.currNode == null ? \"null\" : props.currNode.goal}</div>*/}\r\n      {/*    }*/}\r\n      {/*  </div>*/}\r\n\r\n        {/*{JSON.stringify(tree)}*/}\r\n\r\n        {tree && tree !== {} &&\r\n        <div style={{ width: '100vw', height: '90vh' }}>\r\n          <Tree\r\n            data={tree}\r\n            renderCustomNodeElement={<div style={{width: 30, height: 30, backgroundColor: \"red\"}}></div>}\r\n            // height={800}\r\n            // width={800}\r\n            // animated\r\n          />\r\n        </div>\r\n\r\n        }\r\n\r\n      {/*  <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>*/}\r\n      {/*    <div>{*/}\r\n      {/*      props.currNode !== null && typeof(props.currNode) !== \"string\" &&*/}\r\n      {/*      <div>{props.currNode.children.map((step, index) => (*/}\r\n      {/*        <div style={{display: \"flex\", alignItems: \"center\"}}>*/}\r\n      {/*          <div*/}\r\n      {/*            style={{backgroundColor: \"rgb(6,98,191)\", padding: 15, borderRadius: 50, color: \"white\", margin: 10}}*/}\r\n      {/*          >*/}\r\n\r\n      {/*          { hasChildren(step) ?*/}\r\n      {/*            props.graphData[parseInt(step)].goal : step*/}\r\n      {/*          }*/}\r\n      {/*          </div>*/}\r\n\r\n      {/*          {hasChildren(step) &&*/}\r\n      {/*            <div*/}\r\n      {/*              className={\"plusButton\"}*/}\r\n      {/*              onClick={() => props.selectChild(parseInt(step))}*/}\r\n      {/*            >*/}\r\n      {/*              <AddIcon style={{color: \"white\"}}/>*/}\r\n      {/*            </div>*/}\r\n      {/*          }*/}\r\n      {/*        </div>*/}\r\n      {/*      ))}</div>*/}\r\n      {/*    }</div>*/}\r\n      {/*  </div>*/}\r\n      {/*</div>*/}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n/* Redux */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchReducer.search,\r\n    currNode: state.graphReducer.currNode,\r\n    prevNodeStack: state.graphReducer.prevNodeStack,\r\n    parsedData: state.graphReducer.parsedData,\r\n    graphData: state.graphReducer.graphData\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    callSearch: (search) => dispatch(setSearch(search)),\r\n    setCurrNode: (search) => dispatch(setCurrNode(search)),\r\n    selectChild: (i) => dispatch(selectChild(i)),\r\n    goBack: () => dispatch(goBack())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View)\r\n"]},"metadata":{},"sourceType":"module"}