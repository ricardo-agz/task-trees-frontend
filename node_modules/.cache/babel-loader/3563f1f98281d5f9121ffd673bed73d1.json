{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Desktop\\\\School\\\\Research\\\\NLP\\\\WikiHow\\\\visualizer\\\\src\\\\views\\\\View.js\";\nimport React from \"react\";\nimport { setSearch } from \"../application/actions/Search\";\nimport { goBack, selectChild, setCurrNode } from \"../application/actions/Graph\";\nimport { connect } from \"react-redux\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport GridLines from 'react-gridlines';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction View(props) {\n  function hasChildren(step) {// return typeof(parseInt(step))// !== \"NaN\"\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   {JSON.stringify(props.currNode)}\n    //   <div style={{color: \"white\"}}>\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\n    //     {props.currNode !== null && props.currNode.children &&\n    //       <div>\n    //         {props.currNode.children.map((child) => (\n    //           <div>\n    //             {child}\n    //           </div>\n    //         ))}\n    //       </div>\n    //     }\n    //   </div>\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\n    //   {/*  <div>*/}\n    //   {/*    {props.currNode.children.map((child) => (*/}\n    //   {/*      <div>*/}\n    //   {/*        Bruh*/}\n    //   {/*        {JSON.stringify(child)}*/}\n    //   {/*      </div>*/}\n    //   {/*    ))}*/}\n    //   {/*  </div>*/}\n    //   {/*}*/}\n    // </div>\n    _jsxDEV(\"div\", {\n      style: {\n        height: \"100%\",\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flex: 1,\n          height: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: [props.prevNodeStack.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => props.goBack(),\n            className: \"backButton\",\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n              style: {\n                color: \"white\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this), props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              // backgroundColor: \"#2b56d2\",\n              backgroundColor: \"rgb(6,98,191)\",\n              padding: 15,\n              borderRadius: 50,\n              color: \"white\"\n            },\n            children: props.currNode == null ? \"null\" : props.currNode.goal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: props.currNode.children.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  alignItems: \"center\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    backgroundColor: \"rgb(6,98,191)\",\n                    padding: 15,\n                    borderRadius: 50,\n                    color: \"white\",\n                    margin: 10\n                  },\n                  children: step + hasChildren(step) // hasChildren(step) ? props.graphData[parseInt(step)] : step\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  );\n}\n/* Redux */\n\n\n_c = View;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.searchReducer.search,\n    currNode: state.graphReducer.currNode,\n    prevNodeStack: state.graphReducer.prevNodeStack,\n    parsedData: state.graphReducer.parsedData,\n    graphData: state.graphReducer.graphData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callSearch: search => dispatch(setSearch(search)),\n    setCurrNode: search => dispatch(setCurrNode(search)),\n    selectChild: i => dispatch(selectChild(i)),\n    goBack: () => dispatch(goBack())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/views/View.js"],"names":["React","setSearch","goBack","selectChild","setCurrNode","connect","AddIcon","ChevronLeftIcon","GridLines","View","props","hasChildren","step","height","flex","display","alignItems","justifyContent","prevNodeStack","length","color","currNode","backgroundColor","padding","borderRadius","goal","children","map","index","margin","mapStateToProps","state","search","searchReducer","graphReducer","parsedData","graphData","mapDispatchToProps","dispatch","callSearch","i"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport {setSearch} from \"../application/actions/Search\";\r\nimport {goBack, selectChild, setCurrNode} from \"../application/actions/Graph\";\r\nimport {connect} from \"react-redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport GridLines from 'react-gridlines';\r\n\r\nfunction View(props) {\r\n  function hasChildren(step) {\r\n    // return typeof(parseInt(step))// !== \"NaN\"\r\n  }\r\n\r\n  return (\r\n    // <div>\r\n    //   {JSON.stringify(props.currNode)}\r\n    //   <div style={{color: \"white\"}}>\r\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\r\n    //     {props.currNode !== null && props.currNode.children &&\r\n    //       <div>\r\n    //         {props.currNode.children.map((child) => (\r\n    //           <div>\r\n    //             {child}\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     }\r\n    //   </div>\r\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\r\n    //   {/*  <div>*/}\r\n    //   {/*    {props.currNode.children.map((child) => (*/}\r\n    //   {/*      <div>*/}\r\n    //   {/*        Bruh*/}\r\n    //   {/*        {JSON.stringify(child)}*/}\r\n    //   {/*      </div>*/}\r\n    //   {/*    ))}*/}\r\n    //   {/*  </div>*/}\r\n    //   {/*}*/}\r\n    // </div>\r\n\r\n\r\n\r\n    <div style={{height: \"100%\", flex: 1}}>\r\n      <div style={{display: \"flex\", flex: 1, height: \"100%\"}}>\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n\r\n          {props.prevNodeStack.length > 0 &&\r\n          <div\r\n            onClick={() => props.goBack()}\r\n            className={\"backButton\"}\r\n          >\r\n            <ChevronLeftIcon style={{color: \"white\"}}/>\r\n          </div>\r\n          }\r\n\r\n\r\n          {props.currNode !== null && typeof props.currNode !== \"string\" &&\r\n            <div\r\n              style={{\r\n                // backgroundColor: \"#2b56d2\",\r\n                backgroundColor: \"rgb(6,98,191)\",\r\n                padding: 15, borderRadius: 50, color: \"white\"\r\n              }}\r\n            >{props.currNode == null ? \"null\" : props.currNode.goal}</div>\r\n          }\r\n        </div>\r\n\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n          <div>{\r\n            props.currNode !== null && typeof(props.currNode) !== \"string\" &&\r\n            <div>{props.currNode.children.map((step, index) => (\r\n              <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <div\r\n                  style={{backgroundColor: \"rgb(6,98,191)\", padding: 15, borderRadius: 50, color: \"white\", margin: 10}}\r\n                >\r\n                {\r\n                  step + hasChildren(step)\r\n                // hasChildren(step) ? props.graphData[parseInt(step)] : step\r\n                }\r\n                </div>\r\n\r\n                {/*{step.steps.length > 0 &&*/}\r\n                {/*  <div*/}\r\n                {/*    className={\"plusButton\"}*/}\r\n                {/*    onClick={() => props.selectChild(index)}*/}\r\n                {/*  >*/}\r\n                {/*    <AddIcon style={{color: \"white\"}}/>*/}\r\n                {/*  </div>*/}\r\n                {/*}*/}\r\n              </div>\r\n            ))}</div>\r\n          }</div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n/* Redux */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchReducer.search,\r\n    currNode: state.graphReducer.currNode,\r\n    prevNodeStack: state.graphReducer.prevNodeStack,\r\n    parsedData: state.graphReducer.parsedData,\r\n    graphData: state.graphReducer.graphData\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    callSearch: (search) => dispatch(setSearch(search)),\r\n    setCurrNode: (search) => dispatch(setCurrNode(search)),\r\n    selectChild: (i) => dispatch(selectChild(i)),\r\n    goBack: () => dispatch(goBack())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View)\r\n"]},"metadata":{},"sourceType":"module"}