{"ast":null,"code":"// const json_fragment = require(\"./testjson.json\")\nconst json_fragment = `\n  {\n    \"Take your temperature to see if you have a fever.\": {\n      \"corresponding_goal\": \"Treat Coronavirus\",\n      \"gold_goal\": \"Take a Temperature\",\n      \"retrieved_goals\": [\n        \"Take a Temperature\",\n        \"Tell if You Have a Fever\",\n        \"Take a Feeling Temperature\",\n        \"Act when You Have Fever\",\n        \"Induce a Fever\",\n        \"Treat a Fever\",\n        \"React When You Have a Fever\",\n        \"Measure Temperature\",\n        \"Get Rid of a Fever\",\n        \"Take a Horse's Temperature\"\n      ],\n      \"retrieved_goals_similarity\": [\n        \"0.7931596\",\n        \"0.7311406\",\n        \"0.69078207\",\n        \"0.68027234\",\n        \"0.67009103\",\n        \"0.65012324\",\n        \"0.62758255\",\n        \"0.62638724\",\n        \"0.6208831\",\n        \"0.6090715\"\n      ],\n      \"retrieved_goal_rank\": 0\n    }\n  }\n`;\nconst parsed = JSON.parse(json_fragment);\n\nconst capitalize = s => {\n  if (typeof s !== 'string') return '';\n  s = s.toLowerCase();\n  return s.charAt(0).toUpperCase() + s.slice(1) + \".\";\n};\n\nlet graph = [];\n\nfor (const [index, [key, value]] of Object.entries(Object.entries(parsed))) {\n  parsed[key] = {\n    goal: key,\n    ...parsed[key],\n    index: index\n  };\n  graph[index] = parsed[key];\n}\n\nfor (let i = 0; i < graph.length; i++) {\n  graph[i] = { ...graph[i],\n    children: []\n  };\n\n  for (let j = 0; j < graph[i].retrieved_goals.length; j++) {\n    let child = graph[i].retrieved_goals[j];\n    child = capitalize(child);\n    let from_parsed = parsed[child];\n\n    if (typeof from_parsed !== \"undefined\") {\n      graph[i].children.push(parsed[child].index);\n    } else {\n      graph[i].children.push(child);\n    }\n  }\n} // for (let i = 0; i < graph.length; i++) {\n//   console.log(graph[i])\n// }\n\n\nexport const graphData = graph;\nexport const parsedData = parsed;","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/application/DataFragment.js"],"names":["json_fragment","parsed","JSON","parse","capitalize","s","toLowerCase","charAt","toUpperCase","slice","graph","index","key","value","Object","entries","goal","i","length","children","j","retrieved_goals","child","from_parsed","push","graphData","parsedData"],"mappings":"AAAA;AAEA,MAAMA,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCA;AAkCA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAf;;AAEA,MAAMI,UAAU,GAAIC,CAAD,IAAO;AACxB,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAO,EAAP;AAC3BA,EAAAA,CAAC,GAAIA,CAAC,CAACC,WAAF,EAAL;AACA,SAAOD,CAAC,CAACE,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BH,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA5B,GAAyC,GAAhD;AACD,CAJD;;AAMA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,KAAK,MAAM,CAACC,KAAD,EAAQ,CAACC,GAAD,EAAMC,KAAN,CAAR,CAAX,IAAoCC,MAAM,CAACC,OAAP,CAAgBD,MAAM,CAACC,OAAP,CAAed,MAAf,CAAhB,CAApC,EAA8E;AAC5EA,EAAAA,MAAM,CAACW,GAAD,CAAN,GAAc;AAACI,IAAAA,IAAI,EAAEJ,GAAP;AAAY,OAAGX,MAAM,CAACW,GAAD,CAArB;AAA4BD,IAAAA,KAAK,EAAEA;AAAnC,GAAd;AACAD,EAAAA,KAAK,CAACC,KAAD,CAAL,GAAeV,MAAM,CAACW,GAAD,CAArB;AACD;;AAED,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCP,EAAAA,KAAK,CAACO,CAAD,CAAL,GAAW,EAAC,GAAGP,KAAK,CAACO,CAAD,CAAT;AAAcE,IAAAA,QAAQ,EAAE;AAAxB,GAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACO,CAAD,CAAL,CAASI,eAAT,CAAyBH,MAA7C,EAAqDE,CAAC,EAAtD,EAA0D;AACxD,QAAIE,KAAK,GAAGZ,KAAK,CAACO,CAAD,CAAL,CAASI,eAAT,CAAyBD,CAAzB,CAAZ;AACAE,IAAAA,KAAK,GAAGlB,UAAU,CAACkB,KAAD,CAAlB;AACA,QAAIC,WAAW,GAAGtB,MAAM,CAACqB,KAAD,CAAxB;;AACA,QAAI,OAAOC,WAAP,KAAwB,WAA5B,EAAyC;AACvCb,MAAAA,KAAK,CAACO,CAAD,CAAL,CAASE,QAAT,CAAkBK,IAAlB,CAAuBvB,MAAM,CAACqB,KAAD,CAAN,CAAcX,KAArC;AACD,KAFD,MAEO;AACLD,MAAAA,KAAK,CAACO,CAAD,CAAL,CAASE,QAAT,CAAkBK,IAAlB,CAAuBF,KAAvB;AACD;AACF;AACF,C,CAED;AACA;AACA;;;AAEA,OAAO,MAAMG,SAAS,GAAGf,KAAlB;AAEP,OAAO,MAAMgB,UAAU,GAAGzB,MAAnB","sourcesContent":["// const json_fragment = require(\"./testjson.json\")\r\n\r\nconst json_fragment = `\r\n  {\r\n    \"Take your temperature to see if you have a fever.\": {\r\n      \"corresponding_goal\": \"Treat Coronavirus\",\r\n      \"gold_goal\": \"Take a Temperature\",\r\n      \"retrieved_goals\": [\r\n        \"Take a Temperature\",\r\n        \"Tell if You Have a Fever\",\r\n        \"Take a Feeling Temperature\",\r\n        \"Act when You Have Fever\",\r\n        \"Induce a Fever\",\r\n        \"Treat a Fever\",\r\n        \"React When You Have a Fever\",\r\n        \"Measure Temperature\",\r\n        \"Get Rid of a Fever\",\r\n        \"Take a Horse's Temperature\"\r\n      ],\r\n      \"retrieved_goals_similarity\": [\r\n        \"0.7931596\",\r\n        \"0.7311406\",\r\n        \"0.69078207\",\r\n        \"0.68027234\",\r\n        \"0.67009103\",\r\n        \"0.65012324\",\r\n        \"0.62758255\",\r\n        \"0.62638724\",\r\n        \"0.6208831\",\r\n        \"0.6090715\"\r\n      ],\r\n      \"retrieved_goal_rank\": 0\r\n    }\r\n  }\r\n`\r\n\r\nconst parsed = JSON.parse(json_fragment)\r\n\r\nconst capitalize = (s) => {\r\n  if (typeof s !== 'string') return ''\r\n  s =  s.toLowerCase()\r\n  return s.charAt(0).toUpperCase() + s.slice(1) + \".\"\r\n}\r\n\r\nlet graph = []\r\n\r\nfor (const [index, [key, value]] of Object.entries((Object.entries(parsed)))) {\r\n  parsed[key] = {goal: key, ...parsed[key], index: index}\r\n  graph[index] = parsed[key]\r\n}\r\n\r\nfor (let i = 0; i < graph.length; i++) {\r\n  graph[i] = {...graph[i], children: []}\r\n  for (let j = 0; j < graph[i].retrieved_goals.length; j++) {\r\n    let child = graph[i].retrieved_goals[j];\r\n    child = capitalize(child)\r\n    let from_parsed = parsed[child]\r\n    if (typeof(from_parsed) !== \"undefined\") {\r\n      graph[i].children.push(parsed[child].index)\r\n    } else {\r\n      graph[i].children.push(child)\r\n    }\r\n  }\r\n}\r\n\r\n// for (let i = 0; i < graph.length; i++) {\r\n//   console.log(graph[i])\r\n// }\r\n\r\nexport const graphData = graph;\r\n\r\nexport const parsedData = parsed;\r\n"]},"metadata":{},"sourceType":"module"}