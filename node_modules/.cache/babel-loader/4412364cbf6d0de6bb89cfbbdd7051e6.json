{"ast":null,"code":"import { GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH } from \"../Types\";\nimport { TestData } from \"../TestData\";\nimport { fragment } from \"../DataFragment\";\n\nconst data = require('../para_step_goal_links_gold.json');\n\nconst capitalize = s => {\n  if (typeof s !== 'string') return '';\n  s = s.toLowerCase();\n  return s.charAt(0).toUpperCase() + s.slice(1) + \".\";\n}; // const parsed = JSON.parse(data);\n\n\nlet graph = [];\n\nfor (const [index, [key, value]] of Object.entries(Object.entries(fragment))) {\n  fragment[key] = { ...fragment[key],\n    index: index\n  };\n  graph[index] = fragment[key];\n}\n\nfor (let i = 0; i < graph.length; i++) {\n  graph[i] = { ...graph[i],\n    children: []\n  };\n\n  for (let j = 0; j < graph[i].retrieved_goals.length; j++) {\n    let child = graph[i].retrieved_goals[j];\n    child = capitalize(child);\n    let from_parsed = fragment[child];\n\n    if (typeof from_parsed !== \"undefined\") {\n      graph[i].children.push(fragment[child].index);\n    }\n  }\n}\n\nconst initialState = {\n  currNode: null,\n  prevNodeStack: [],\n  // graphData: TestData,\n  graphData: fragment,\n  // data: JSON.parse(data)\n  data: data\n};\n\nconst graphReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GOBACK:\n      return { ...state,\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1]\n      };\n\n    case SELECTCHILD:\n      return { ...state,\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\n        currNode: state.currNode.steps[action.data]\n      };\n\n    case SETCURRNODE:\n      return { ...state,\n        prevNode: null,\n        currNode: state.graphData[action.data]\n      };\n\n    default:\n      return state;\n  } // function isGoal(string) {\n  //   let words = string.split(\" \");\n  //   let allCaps = true;\n  // }\n  // function bfs(search) {\n  //   let queue = [];\n  //\n  //   for (let i = 0; i < state.graphData.length; i++) {\n  //     queue.push(state.graphData[i]);\n  //   }\n  //\n  //   let runs = 0;\n  //   while (queue.length > 0 && runs < 50) {\n  //     let v = queue.shift()\n  //     if (v.goal === search) {\n  //       return v;\n  //     } else {\n  //       for (let i = 0; i < v.steps.length; i++) {\n  //         queue.push(v.steps[i])\n  //       }\n  //     }\n  //     runs++\n  //   }\n  //\n  //   return null;\n  // }\n  // switch (action.type) {\n  //   case GOBACK:\n  //     return {\n  //       ...state,\n  //       currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\n  //       prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\n  //     }\n  //   case SELECTCHILD:\n  //     return {\n  //       ...state,\n  //       prevNodeStack: state.prevNodeStack.concat(state.currNode),\n  //       currNode: state.currNode.steps[action.data]\n  //     }\n  //   case SETCURRNODE:\n  //     // console.log(\"bfs out: \" + bfs(action.data))\n  //     // console.log(state.data.entries.length)\n  //     return {\n  //       ...state,\n  //       prevNode: null,\n  //       currNode: bfs(action.data)\n  //     }\n  //   default:\n  //     return state;\n  // }\n\n};\n\nexport default graphReducer;","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/application/reducers/GraphReducer.js"],"names":["GOBACK","SELECTCHILD","SETCURRNODE","SETSEARCH","TestData","fragment","data","require","capitalize","s","toLowerCase","charAt","toUpperCase","slice","graph","index","key","value","Object","entries","i","length","children","j","retrieved_goals","child","from_parsed","push","initialState","currNode","prevNodeStack","graphData","graphReducer","state","action","type","concat","steps","prevNode"],"mappings":"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","sourcesContent":["import {GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH} from \"../Types\";\r\nimport {TestData} from \"../TestData\";\r\nimport {fragment} from \"../DataFragment\"\r\nconst data = require('../para_step_goal_links_gold.json');\r\n\r\nconst capitalize = (s) => {\r\n  if (typeof s !== 'string') return ''\r\n  s =  s.toLowerCase()\r\n  return s.charAt(0).toUpperCase() + s.slice(1) + \".\"\r\n}\r\n\r\n// const parsed = JSON.parse(data);\r\nlet graph = []\r\n\r\nfor (const [index, [key, value]] of Object.entries((Object.entries(fragment)))) {\r\n  fragment[key] = {...fragment[key], index: index}\r\n  graph[index] = fragment[key]\r\n}\r\n\r\nfor (let i = 0; i < graph.length; i++) {\r\n  graph[i] = {...graph[i], children: []}\r\n  for (let j = 0; j < graph[i].retrieved_goals.length; j++) {\r\n    let child = graph[i].retrieved_goals[j];\r\n    child = capitalize(child)\r\n    let from_parsed = fragment[child]\r\n    if (typeof(from_parsed) !== \"undefined\") {\r\n      graph[i].children.push(fragment[child].index)\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  currNode: null,\r\n  prevNodeStack: [],\r\n  // graphData: TestData,\r\n  graphData: fragment,\r\n  // data: JSON.parse(data)\r\n  data: data\r\n}\r\n\r\n\r\nconst graphReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GOBACK:\r\n      return {\r\n        ...state,\r\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\r\n      }\r\n    case SELECTCHILD:\r\n      return {\r\n        ...state,\r\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\r\n        currNode: state.currNode.steps[action.data]\r\n      }\r\n    case SETCURRNODE:\r\n      return {\r\n        ...state,\r\n        prevNode: null,\r\n        currNode: state.graphData[action.data]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n\r\n  // function isGoal(string) {\r\n  //   let words = string.split(\" \");\r\n  //   let allCaps = true;\r\n  // }\r\n\r\n  // function bfs(search) {\r\n  //   let queue = [];\r\n  //\r\n  //   for (let i = 0; i < state.graphData.length; i++) {\r\n  //     queue.push(state.graphData[i]);\r\n  //   }\r\n  //\r\n  //   let runs = 0;\r\n  //   while (queue.length > 0 && runs < 50) {\r\n  //     let v = queue.shift()\r\n  //     if (v.goal === search) {\r\n  //       return v;\r\n  //     } else {\r\n  //       for (let i = 0; i < v.steps.length; i++) {\r\n  //         queue.push(v.steps[i])\r\n  //       }\r\n  //     }\r\n  //     runs++\r\n  //   }\r\n  //\r\n  //   return null;\r\n  // }\r\n\r\n  // switch (action.type) {\r\n  //   case GOBACK:\r\n  //     return {\r\n  //       ...state,\r\n  //       currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\r\n  //       prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\r\n  //     }\r\n  //   case SELECTCHILD:\r\n  //     return {\r\n  //       ...state,\r\n  //       prevNodeStack: state.prevNodeStack.concat(state.currNode),\r\n  //       currNode: state.currNode.steps[action.data]\r\n  //     }\r\n  //   case SETCURRNODE:\r\n  //     // console.log(\"bfs out: \" + bfs(action.data))\r\n  //     // console.log(state.data.entries.length)\r\n  //     return {\r\n  //       ...state,\r\n  //       prevNode: null,\r\n  //       currNode: bfs(action.data)\r\n  //     }\r\n  //   default:\r\n  //     return state;\r\n  // }\r\n}\r\n\r\nexport default graphReducer\r\n"]},"metadata":{},"sourceType":"module"}