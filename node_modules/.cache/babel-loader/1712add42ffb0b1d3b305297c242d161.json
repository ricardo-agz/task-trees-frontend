{"ast":null,"code":"import { GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH } from \"../Types\";\nimport { TestData } from \"../TestData\";\nconst initialState = {\n  currNode: null,\n  prevNodeStack: [],\n  graphData: TestData\n};\n\nconst graphReducer = (state = initialState, action) => {\n  function bfs(search) {\n    let queue = [];\n    let curr = state.graphData[0];\n\n    for (let i = 0; i < state.graphData.length; i++) {\n      queue.push(state.graphData[i]);\n    }\n\n    while (queue.length > 0 && curr.goal !== search) {\n      let v = queue.shift();\n    }\n  }\n\n  switch (action.type) {\n    case GOBACK:\n      return { ...state,\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\n        prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\n      };\n\n    case SELECTCHILD:\n      return { ...state,\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\n        currNode: state.currNode.steps[action.data]\n      };\n\n    case SETCURRNODE:\n      return { ...state,\n        prevNode: null,\n        currNode: state.graphData[0]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default graphReducer;","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/application/reducers/GraphReducer.js"],"names":["GOBACK","SELECTCHILD","SETCURRNODE","SETSEARCH","TestData","initialState","currNode","prevNodeStack","graphData","graphReducer","state","action","bfs","search","queue","curr","i","length","push","goal","v","shift","type","slice","concat","steps","data","prevNode"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,SAA1C,QAA0D,UAA1D;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,SAAS,EAAEJ;AAHQ,CAArB;;AAMA,MAAMK,YAAY,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,WAASC,GAAT,CAAaC,MAAb,EAAqB;AACnB,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,IAAI,GAAGL,KAAK,CAACF,SAAN,CAAgB,CAAhB,CAAX;;AAEA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACF,SAAN,CAAgBS,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CF,MAAAA,KAAK,CAACI,IAAN,CAAWR,KAAK,CAACF,SAAN,CAAgBQ,CAAhB,CAAX;AACD;;AAED,WAAOF,KAAK,CAACG,MAAN,GAAe,CAAf,IAAoBF,IAAI,CAACI,IAAL,KAAcN,MAAzC,EAAiD;AAC/C,UAAIO,CAAC,GAAGN,KAAK,CAACO,KAAN,EAAR;AAED;AACF;;AAED,UAAQV,MAAM,CAACW,IAAf;AACE,SAAKtB,MAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,QAAQ,EAAEI,KAAK,CAACH,aAAN,CAAoBG,KAAK,CAACH,aAAN,CAAoBU,MAApB,GAA6B,CAAjD,CAFL;AAGLV,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBgB,KAApB,CAA0B,CAA1B,EAA6Bb,KAAK,CAACH,aAAN,CAAoBU,MAApB,GAA6B,CAA1D;AAHV,OAAP;;AAKF,SAAKhB,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBiB,MAApB,CAA2Bd,KAAK,CAACJ,QAAjC,CAFV;AAGLA,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAemB,KAAf,CAAqBd,MAAM,CAACe,IAA5B;AAHL,OAAP;;AAKF,SAAKxB,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELiB,QAAAA,QAAQ,EAAE,IAFL;AAGLrB,QAAAA,QAAQ,EAAEI,KAAK,CAACF,SAAN,CAAgB,CAAhB;AAHL,OAAP;;AAKF;AACE,aAAOE,KAAP;AApBJ;AAsBD,CArCD;;AAuCA,eAAeD,YAAf","sourcesContent":["import {GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH} from \"../Types\";\r\nimport {TestData} from \"../TestData\";\r\n\r\nconst initialState = {\r\n  currNode: null,\r\n  prevNodeStack: [],\r\n  graphData: TestData\r\n}\r\n\r\nconst graphReducer = (state = initialState, action) => {\r\n  function bfs(search) {\r\n    let queue = [];\r\n    let curr = state.graphData[0]\r\n\r\n    for (let i = 0; i < state.graphData.length; i++) {\r\n      queue.push(state.graphData[i]);\r\n    }\r\n\r\n    while (queue.length > 0 && curr.goal !== search) {\r\n      let v = queue.shift()\r\n      \r\n    }\r\n  }\r\n\r\n  switch (action.type) {\r\n    case GOBACK:\r\n      return {\r\n        ...state,\r\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\r\n        prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\r\n      }\r\n    case SELECTCHILD:\r\n      return {\r\n        ...state,\r\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\r\n        currNode: state.currNode.steps[action.data]\r\n      }\r\n    case SETCURRNODE:\r\n      return {\r\n        ...state,\r\n        prevNode: null,\r\n        currNode: state.graphData[0]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default graphReducer\r\n"]},"metadata":{},"sourceType":"module"}