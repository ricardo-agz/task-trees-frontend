{"ast":null,"code":"import { GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH } from \"../Types\";\nimport { TestData } from \"../TestData\";\n\nconst data = require('../para_step_goal_links_gold.json');\n\nconst initialState = {\n  currNode: null,\n  prevNodeStack: [],\n  graphData: TestData,\n  data: data\n};\n\nconst graphReducer = (state = initialState, action) => {\n  function bfs(search) {\n    let queue = [];\n    let curr = state.graphData[0];\n\n    for (let i = 0; i < state.graphData.length; i++) {\n      // console.log(JSON.stringify(state.graphData[i]))\n      queue.push(state.graphData[i]);\n    } // console.log(\"queue len: \" + queue.length)\n\n\n    let runs = 0;\n\n    while (queue.length > 0 && runs < 50) {\n      let v = queue.shift(); // console.log(\"pop: \" + JSON.stringify(v))\n\n      if (v.goal === search) {\n        return v;\n      } else {\n        for (let i = 0; i < v.steps.length; i++) {\n          queue.push(v.steps[i]);\n        }\n      }\n\n      runs++;\n    }\n\n    return null;\n  }\n\n  switch (action.type) {\n    case GOBACK:\n      return { ...state,\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\n        prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\n      };\n\n    case SELECTCHILD:\n      return { ...state,\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\n        currNode: state.currNode.steps[action.data]\n      };\n\n    case SETCURRNODE:\n      console.log(\"bfs out: \" + bfs(action.data));\n      return { ...state,\n        prevNode: null,\n        currNode: bfs(action.data)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default graphReducer;","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/application/reducers/GraphReducer.js"],"names":["GOBACK","SELECTCHILD","SETCURRNODE","SETSEARCH","TestData","data","require","initialState","currNode","prevNodeStack","graphData","graphReducer","state","action","bfs","search","queue","curr","i","length","push","runs","v","shift","goal","steps","type","slice","concat","console","log","prevNode"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,SAA1C,QAA0D,UAA1D;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,mCAAD,CAApB;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,SAAS,EAAEN,QAHQ;AAInBC,EAAAA,IAAI,EAAEA;AAJa,CAArB;;AAOA,MAAMM,YAAY,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,WAASC,GAAT,CAAaC,MAAb,EAAqB;AACnB,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,IAAI,GAAGL,KAAK,CAACF,SAAN,CAAgB,CAAhB,CAAX;;AAEA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACF,SAAN,CAAgBS,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C;AACAF,MAAAA,KAAK,CAACI,IAAN,CAAWR,KAAK,CAACF,SAAN,CAAgBQ,CAAhB,CAAX;AACD,KAPkB,CASnB;;;AAEA,QAAIG,IAAI,GAAG,CAAX;;AACA,WAAOL,KAAK,CAACG,MAAN,GAAe,CAAf,IAAoBE,IAAI,GAAG,EAAlC,EAAsC;AACpC,UAAIC,CAAC,GAAGN,KAAK,CAACO,KAAN,EAAR,CADoC,CAEpC;;AACA,UAAID,CAAC,CAACE,IAAF,KAAWT,MAAf,EAAuB;AACrB,eAAOO,CAAP;AACD,OAFD,MAEO;AACL,aAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAAC,CAACG,KAAF,CAAQN,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCF,UAAAA,KAAK,CAACI,IAAN,CAAWE,CAAC,CAACG,KAAF,CAAQP,CAAR,CAAX;AACD;AACF;;AACDG,MAAAA,IAAI;AACL;;AAED,WAAO,IAAP;AACD;;AAED,UAAQR,MAAM,CAACa,IAAf;AACE,SAAK1B,MAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELJ,QAAAA,QAAQ,EAAEI,KAAK,CAACH,aAAN,CAAoBG,KAAK,CAACH,aAAN,CAAoBU,MAApB,GAA6B,CAAjD,CAFL;AAGLV,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBkB,KAApB,CAA0B,CAA1B,EAA6Bf,KAAK,CAACH,aAAN,CAAoBU,MAApB,GAA6B,CAA1D;AAHV,OAAP;;AAKF,SAAKlB,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELH,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBmB,MAApB,CAA2BhB,KAAK,CAACJ,QAAjC,CAFV;AAGLA,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeiB,KAAf,CAAqBZ,MAAM,CAACR,IAA5B;AAHL,OAAP;;AAKF,SAAKH,WAAL;AACE2B,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAchB,GAAG,CAACD,MAAM,CAACR,IAAR,CAA7B;AACA,aAAO,EACL,GAAGO,KADE;AAELmB,QAAAA,QAAQ,EAAE,IAFL;AAGLvB,QAAAA,QAAQ,EAAEM,GAAG,CAACD,MAAM,CAACR,IAAR;AAHR,OAAP;;AAKF;AACE,aAAOO,KAAP;AArBJ;AAuBD,CApDD;;AAsDA,eAAeD,YAAf","sourcesContent":["import {GOBACK, SELECTCHILD, SETCURRNODE, SETSEARCH} from \"../Types\";\r\nimport {TestData} from \"../TestData\";\r\nconst data = require('../para_step_goal_links_gold.json');\r\n\r\nconst initialState = {\r\n  currNode: null,\r\n  prevNodeStack: [],\r\n  graphData: TestData,\r\n  data: data\r\n}\r\n\r\nconst graphReducer = (state = initialState, action) => {\r\n  function bfs(search) {\r\n    let queue = [];\r\n    let curr = state.graphData[0]\r\n\r\n    for (let i = 0; i < state.graphData.length; i++) {\r\n      // console.log(JSON.stringify(state.graphData[i]))\r\n      queue.push(state.graphData[i]);\r\n    }\r\n\r\n    // console.log(\"queue len: \" + queue.length)\r\n\r\n    let runs = 0;\r\n    while (queue.length > 0 && runs < 50) {\r\n      let v = queue.shift()\r\n      // console.log(\"pop: \" + JSON.stringify(v))\r\n      if (v.goal === search) {\r\n        return v;\r\n      } else {\r\n        for (let i = 0; i < v.steps.length; i++) {\r\n          queue.push(v.steps[i])\r\n        }\r\n      }\r\n      runs++\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  switch (action.type) {\r\n    case GOBACK:\r\n      return {\r\n        ...state,\r\n        currNode: state.prevNodeStack[state.prevNodeStack.length - 1],\r\n        prevNodeStack: state.prevNodeStack.slice(0, state.prevNodeStack.length - 1)\r\n      }\r\n    case SELECTCHILD:\r\n      return {\r\n        ...state,\r\n        prevNodeStack: state.prevNodeStack.concat(state.currNode),\r\n        currNode: state.currNode.steps[action.data]\r\n      }\r\n    case SETCURRNODE:\r\n      console.log(\"bfs out: \" + bfs(action.data))\r\n      return {\r\n        ...state,\r\n        prevNode: null,\r\n        currNode: bfs(action.data)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default graphReducer\r\n"]},"metadata":{},"sourceType":"module"}