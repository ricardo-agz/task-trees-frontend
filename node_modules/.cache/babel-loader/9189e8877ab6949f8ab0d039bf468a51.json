{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Desktop\\\\School\\\\Research\\\\NLP\\\\WikiHow\\\\visualizer\\\\src\\\\views\\\\View.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { setSearch } from \"../application/actions/Search\";\nimport { goBack, selectChild, setCurrNode } from \"../application/actions/Graph\";\nimport { connect } from \"react-redux\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport \"./Styles.css\"; // import Tree from 'react-tree-graph';\n\nimport Tree from 'react-d3-tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction View(props) {\n  _s();\n\n  const [tree, setTree] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    makeTree();\n  }, [props.currNode]);\n\n  function hasChildren(step) {\n    return !isNaN(parseInt(step));\n  }\n\n  function handleCallNode(node) {\n    props.setCurrNode(format(node));\n  }\n\n  useEffect(() => {// const dimensions = treeContainer.getBoundingClientRect();\n  }, []);\n\n  const format = s => {\n    if (typeof s !== 'string') return '';\n    s = s.toLowerCase();\n\n    if (s.charAt(s.length - 1) === \".\") {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    } else {\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\";\n    }\n  };\n\n  const renderRectSvgNode = ({\n    nodeDatum,\n    toggleNode\n  }) =>\n  /*#__PURE__*/\n  // <g>\n  //   <rect width=\"20\" height=\"20\" x=\"-10\" onClick={toggleNode} fill={nodeDatum.children && nodeDatum.children.length > 0 ? \"slategray\" : \"rgb(6,98,191)\"}/>\n  //   <text fill=\"white\" strokeWidth=\"0\" x=\"20\">\n  //     {nodeDatum.name}\n  //   </text>\n  //   {nodeDatum.attributes?.department && (\n  //     <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\n  //       Department: {nodeDatum.attributes?.department}\n  //     </text>\n  //   )}\n  // </g>\n  _jsxDEV(\"div\", {\n    style: {\n      // backgroundColor: \"#2b56d2\",\n      backgroundColor: \"rgb(6,98,191)\",\n      padding: 15,\n      borderRadius: 50,\n      color: \"white\"\n    },\n    onClick: toggleNode,\n    children: nodeDatum.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n\n  function getNodeFromKey(key) {\n    return props.parsedData[key];\n  }\n\n  function getNodeFromIndex(i) {\n    return props.graphData[i];\n  }\n\n  function nodeHasChildren(key) {\n    return props.parsedData[key] !== undefined && props.parsedData[key] !== null;\n  }\n\n  function makeTree() {\n    let tree = {};\n\n    if (props.currNode !== null) {\n      tree = {\n        name: props.currNode.goal // children: []\n\n      };\n      tree = recMakeTree(tree, 5);\n      /*\r\n      // console.log(\"get: \" + JSON.stringify(getNodeFromIndex(7)))\r\n      //\r\n      // console.log(\"this: \" + JSON.stringify(props.currNode))\r\n        let curr = props.currNode;\r\n        // while (curr.children && curr.children.length > 0) {\r\n      //\r\n      // }\r\n        for (let i = 0; i < props.currNode.children.length; i++) {\r\n        let child = props.currNode.children[i]\r\n        let curr = tree\r\n              if (hasChildren(child)) {\r\n          tree.children[i] = {\r\n            name: props.graphData[parseInt(child)].goal,\r\n            children: []\r\n          };\r\n          for (let j = 0; j < props.graphData[parseInt(child)].children.length; j++) {\r\n            let subChild = props.graphData[parseInt(child)].children[j]\r\n            if (hasChildren(subChild)) {\r\n              tree.children[i].children[j] = {\r\n                name: props.graphData[parseInt(subChild)].goal,\r\n                children: []\r\n              };\r\n            } else {\r\n              tree.children[i].children[j] = {\r\n                name: subChild,\r\n                // children: null\r\n              };\r\n            }\r\n          }\r\n        } else {\r\n          tree.children[i] = {\r\n            name: child,\r\n            // children: null\r\n          };\r\n        }\r\n      } */\n    }\n\n    setTree(tree);\n  }\n\n  function recMakeTree(tree, n) {\n    // base case\n    if (!nodeHasChildren(tree.name) || n <= 0) {\n      /*\r\n        name: ....\r\n        children: null\r\n       */\n      return tree;\n    } else {\n      /*\r\n        name: ....\r\n        children: [, , , , ]\r\n       */\n      tree.children = new Array(10);\n\n      for (let i = 0; i < tree.children.length; i++) {\n        let currNode = getNodeFromKey(tree.name);\n        let currNodeIndex = currNode.index;\n        let currNodeWithChildren = props.graphData[currNodeIndex];\n        let child = currNodeWithChildren.children[i];\n\n        if (hasChildren(child)) {\n          tree.children[i] = {\n            name: props.graphData[child].goal\n          };\n          tree.children[i] = recMakeTree(tree.children[i], n - 1);\n        } else {\n          tree.children[i] = {\n            name: child\n          };\n        }\n      }\n\n      return tree;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      flex: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: 35,\n        display: \"flex\",\n        overflow: \"hidden\",\n        overflowX: \"scroll\",\n        marginTop: 10,\n        marginBottom: 10\n      },\n      className: \"scrollView\",\n      children: props.graphData.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: \"rgb(6,98,191)\",\n          padding: 15,\n          borderRadius: 50,\n          color: \"white\",\n          maxWidth: \"300px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          flexGrow: 0,\n          flexShrink: 0,\n          marginLeft: 5,\n          marginRight: 5\n        },\n        onClick: () => handleCallNode(node.goal),\n        children: node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this) // <ScrollNode node={node}/>\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), props.display === \"goal-step\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flex: 1,\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: [props.prevNodeStack.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => props.goBack(),\n          className: \"backButton\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            style: {\n              color: \"white\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            // backgroundColor: \"#2b56d2\",\n            backgroundColor: \"rgb(6,98,191)\",\n            padding: 15,\n            borderRadius: 50,\n            color: \"white\"\n          },\n          children: props.currNode == null ? \"null\" : props.currNode.goal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: props.currNode !== null && typeof props.currNode !== \"string\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: props.currNode.children.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"similarity\",\n                style: {\n                  color: \"white\",\n                  fontSize: 12\n                },\n                children: parseFloat(props.currNode.retrieved_goals_similarity[index]).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  backgroundColor: \"rgb(6,98,191)\",\n                  padding: 15,\n                  borderRadius: 50,\n                  color: \"white\",\n                  margin: 10,\n                  height: 10,\n                  display: \"flex\",\n                  alignItems: \"center\"\n                },\n                children: hasChildren(step) ? props.graphData[parseInt(step)].goal : step\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), hasChildren(step) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"plusButton\",\n                onClick: () => props.selectChild(parseInt(step)),\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                  style: {\n                    color: \"white\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tree && tree !== {} && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100vw',\n          height: '90vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: tree,\n          rootNodeClassName: \"node__root\",\n          branchNodeClassName: \"node__branch\",\n          leafNodeClassName: \"node__leaf\",\n          style: {\n            color: \"white\"\n          } // renderCustomNodeElement={({ nodeDatum, toggleNode }) => {(<div style={{width: 30, height: 30, backgroundColor: \"red\"}}></div>)}}\n          ,\n          renderCustomNodeElement: renderRectSvgNode // height={800}\n          // separation={{nonSiblings: 100, siblings: 200}}\n          // width={800}\n          // orientation={\"vertical\"}\n          // animated\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this); // if (props.display === \"goal-step\") {\n  //   return (\n  //\n  //   )\n  // } else {\n  //\n  // }\n  // return (\n  // <div>\n  //   {JSON.stringify(props.currNode)}\n  //   <div style={{color: \"white\"}}>\n  //     {/*{JSON.stringify(props.graphData[2])}*/}\n  //     {props.currNode !== null && props.currNode.children &&\n  //       <div>\n  //         {props.currNode.children.map((child) => (\n  //           <div>\n  //             {child}\n  //           </div>\n  //         ))}\n  //       </div>\n  //     }\n  //   </div>\n  //   {/*{props.currNode !== null && props.currNode.children &&*/}\n  //   {/*  <div>*/}\n  //   {/*    {props.currNode.children.map((child) => (*/}\n  //   {/*      <div>*/}\n  //   {/*        Bruh*/}\n  //   {/*        {JSON.stringify(child)}*/}\n  //   {/*      </div>*/}\n  //   {/*    ))}*/}\n  //   {/*  </div>*/}\n  //   {/*}*/}\n  // </div>\n  // )\n}\n/* Redux */\n\n\n_s(View, \"0aIx9bYL5j0VDylP/UKls23o7OI=\");\n\n_c = View;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.searchReducer.search,\n    currNode: state.graphReducer.currNode,\n    prevNodeStack: state.graphReducer.prevNodeStack,\n    parsedData: state.graphReducer.parsedData,\n    graphData: state.graphReducer.graphData,\n    display: state.navReducer.display\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callSearch: search => dispatch(setSearch(search)),\n    setCurrNode: search => dispatch(setCurrNode(search)),\n    selectChild: i => dispatch(selectChild(i)),\n    goBack: () => dispatch(goBack())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/views/View.js"],"names":["React","useEffect","useState","setSearch","goBack","selectChild","setCurrNode","connect","AddIcon","ChevronLeftIcon","Tree","View","props","tree","setTree","translate","setTranslate","x","y","makeTree","currNode","hasChildren","step","isNaN","parseInt","handleCallNode","node","format","s","toLowerCase","charAt","length","toUpperCase","slice","renderRectSvgNode","nodeDatum","toggleNode","backgroundColor","padding","borderRadius","color","name","getNodeFromKey","key","parsedData","getNodeFromIndex","i","graphData","nodeHasChildren","undefined","goal","recMakeTree","n","children","Array","currNodeIndex","index","currNodeWithChildren","child","height","flex","width","display","overflow","overflowX","marginTop","marginBottom","map","maxWidth","alignItems","flexGrow","flexShrink","marginLeft","marginRight","justifyContent","prevNodeStack","fontSize","parseFloat","retrieved_goals_similarity","toFixed","margin","mapStateToProps","state","search","searchReducer","graphReducer","navReducer","mapDispatchToProps","dispatch","callSearch"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport {setSearch} from \"../application/actions/Search\";\r\nimport {goBack, selectChild, setCurrNode} from \"../application/actions/Graph\";\r\nimport {connect} from \"react-redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport \"./Styles.css\"\r\n// import Tree from 'react-tree-graph';\r\nimport Tree from 'react-d3-tree';\r\n\r\nfunction View(props) {\r\n  const [tree, setTree] = useState(null)\r\n  const [translate, setTranslate] = useState({x: 0, y: 0})\r\n\r\n  useEffect(() => {\r\n    makeTree()\r\n  }, [props.currNode])\r\n\r\n  function hasChildren(step) {\r\n    return !isNaN(parseInt(step))\r\n  }\r\n\r\n  function handleCallNode(node) {\r\n    props.setCurrNode(format(node))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // const dimensions = treeContainer.getBoundingClientRect();\r\n\r\n\r\n  }, [])\r\n\r\n  const format = (s) => {\r\n    if (typeof s !== 'string') return ''\r\n    s =  s.toLowerCase()\r\n    if (s.charAt(s.length - 1) === \".\") {\r\n      return s.charAt(0).toUpperCase() + s.slice(1)\r\n    } else {\r\n      return s.charAt(0).toUpperCase() + s.slice(1) + \".\"\r\n    }\r\n  }\r\n\r\n  const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\r\n    // <g>\r\n    //   <rect width=\"20\" height=\"20\" x=\"-10\" onClick={toggleNode} fill={nodeDatum.children && nodeDatum.children.length > 0 ? \"slategray\" : \"rgb(6,98,191)\"}/>\r\n    //   <text fill=\"white\" strokeWidth=\"0\" x=\"20\">\r\n    //     {nodeDatum.name}\r\n    //   </text>\r\n    //   {nodeDatum.attributes?.department && (\r\n    //     <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\r\n    //       Department: {nodeDatum.attributes?.department}\r\n    //     </text>\r\n    //   )}\r\n    // </g>\r\n    <div\r\n      style={{\r\n        // backgroundColor: \"#2b56d2\",\r\n        backgroundColor: \"rgb(6,98,191)\",\r\n        padding: 15, borderRadius: 50, color: \"white\"\r\n      }}\r\n      onClick={toggleNode}\r\n    >{nodeDatum.name}</div>\r\n  );\r\n\r\n  function getNodeFromKey(key) {\r\n    return (props.parsedData[key])\r\n  }\r\n  function getNodeFromIndex(i) {\r\n    return (props.graphData[i])\r\n  }\r\n  function nodeHasChildren(key) {\r\n    return (props.parsedData[key] !== undefined && props.parsedData[key] !== null)\r\n  }\r\n\r\n  function makeTree() {\r\n    let tree = {}\r\n    if (props.currNode !== null) {\r\n      tree = {\r\n        name: props.currNode.goal,\r\n        // children: []\r\n      }\r\n\r\n      tree = recMakeTree(tree, 5)\r\n\r\n      /*\r\n      // console.log(\"get: \" + JSON.stringify(getNodeFromIndex(7)))\r\n      //\r\n      // console.log(\"this: \" + JSON.stringify(props.currNode))\r\n\r\n      let curr = props.currNode;\r\n\r\n      // while (curr.children && curr.children.length > 0) {\r\n      //\r\n      // }\r\n\r\n      for (let i = 0; i < props.currNode.children.length; i++) {\r\n        let child = props.currNode.children[i]\r\n        let curr = tree\r\n\r\n\r\n\r\n        if (hasChildren(child)) {\r\n          tree.children[i] = {\r\n            name: props.graphData[parseInt(child)].goal,\r\n            children: []\r\n          };\r\n          for (let j = 0; j < props.graphData[parseInt(child)].children.length; j++) {\r\n            let subChild = props.graphData[parseInt(child)].children[j]\r\n            if (hasChildren(subChild)) {\r\n              tree.children[i].children[j] = {\r\n                name: props.graphData[parseInt(subChild)].goal,\r\n                children: []\r\n              };\r\n            } else {\r\n              tree.children[i].children[j] = {\r\n                name: subChild,\r\n                // children: null\r\n              };\r\n            }\r\n          }\r\n        } else {\r\n          tree.children[i] = {\r\n            name: child,\r\n            // children: null\r\n          };\r\n        }\r\n      } */\r\n    }\r\n    setTree(tree)\r\n  }\r\n\r\n  function recMakeTree(tree, n) {\r\n    // base case\r\n    if (!nodeHasChildren(tree.name) || n <= 0) {\r\n      /*\r\n        name: ....\r\n        children: null\r\n       */\r\n      return tree\r\n    } else {\r\n      /*\r\n        name: ....\r\n        children: [, , , , ]\r\n       */\r\n      tree.children = new Array(10)\r\n      for (let i = 0; i < tree.children.length; i++) {\r\n        let currNode = getNodeFromKey(tree.name)\r\n        let currNodeIndex = currNode.index\r\n        let currNodeWithChildren = props.graphData[currNodeIndex]\r\n        let child = currNodeWithChildren.children[i]\r\n\r\n        if (hasChildren(child)) {\r\n          tree.children[i] = {name: props.graphData[child].goal}\r\n          tree.children[i] = recMakeTree(tree.children[i], n-1)\r\n        } else {\r\n          tree.children[i] = {name: child}\r\n        }\r\n      }\r\n\r\n      return tree\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{height: \"100%\", flex: 1}}>\r\n\r\n      <div style={{width: \"100vw\", height: 35, display: \"flex\", overflow: \"hidden\", overflowX: \"scroll\", marginTop: 10, marginBottom: 10}}\r\n           className={\"scrollView\"}>\r\n        {props.graphData.map((node) => (\r\n          <div\r\n            style={{\r\n              backgroundColor: \"rgb(6,98,191)\",\r\n              padding: 15, borderRadius: 50, color: \"white\",\r\n              maxWidth: \"300px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              flexGrow: 0,\r\n              flexShrink: 0,\r\n              marginLeft: 5,\r\n              marginRight: 5\r\n            }}\r\n            onClick={() => handleCallNode(node.goal)}\r\n          >{node.goal.length > 30 ? node.goal.slice(0, 30) + \"...\" : node.goal}</div>\r\n          // <ScrollNode node={node}/>\r\n        ))}\r\n      </div>\r\n\r\n      { props.display === \"goal-step\" ?\r\n      <div style={{display: \"flex\", flex: 1, height: \"100%\"}}>\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n\r\n          {props.prevNodeStack.length > 0 &&\r\n          <div\r\n            onClick={() => props.goBack()}\r\n            className={\"backButton\"}\r\n          >\r\n            <ChevronLeftIcon style={{color: \"white\"}}/>\r\n          </div>\r\n          }\r\n\r\n          {props.currNode !== null && typeof props.currNode !== \"string\" &&\r\n          <div\r\n            style={{\r\n              // backgroundColor: \"#2b56d2\",\r\n              backgroundColor: \"rgb(6,98,191)\",\r\n              padding: 15, borderRadius: 50, color: \"white\"\r\n            }}\r\n          >{props.currNode == null ? \"null\" : props.currNode.goal}</div>\r\n          }\r\n        </div>\r\n\r\n        <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n          <div>{\r\n            props.currNode !== null && typeof(props.currNode) !== \"string\" &&\r\n            <div>{props.currNode.children.map((step, index) => (\r\n              <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <div\r\n                  className={\"similarity\"}\r\n                  style={{color: \"white\", fontSize: 12}}\r\n                >\r\n                  { parseFloat(props.currNode.retrieved_goals_similarity[index]).toFixed(2) }\r\n                </div>\r\n\r\n                <div\r\n                  style={{\r\n                    backgroundColor: \"rgb(6,98,191)\",\r\n                    padding: 15,\r\n                    borderRadius: 50, color: \"white\", margin: 10,\r\n                    height: 10,\r\n                    display: \"flex\",\r\n                    alignItems: \"center\"\r\n                  }}\r\n                >\r\n\r\n                  { hasChildren(step) ?\r\n                    props.graphData[parseInt(step)].goal : step\r\n                  }\r\n                </div>\r\n\r\n                {hasChildren(step) &&\r\n                <div\r\n                  className={\"plusButton\"}\r\n                  onClick={() => props.selectChild(parseInt(step))}\r\n                >\r\n                  <AddIcon style={{color: \"white\"}}/>\r\n                </div>\r\n                }\r\n              </div>\r\n            ))}</div>\r\n          }</div>\r\n        </div>\r\n      </div>\r\n\r\n      :\r\n\r\n        <div>\r\n          {tree && tree !== {} &&\r\n          <div style={{ width: '100vw', height: '90vh' }}>\r\n            <Tree\r\n              data={tree}\r\n              rootNodeClassName=\"node__root\"\r\n              branchNodeClassName=\"node__branch\"\r\n              leafNodeClassName=\"node__leaf\"\r\n              style={{color: \"white\"}}\r\n              // renderCustomNodeElement={({ nodeDatum, toggleNode }) => {(<div style={{width: 30, height: 30, backgroundColor: \"red\"}}></div>)}}\r\n              renderCustomNodeElement={renderRectSvgNode}\r\n              // height={800}\r\n              // separation={{nonSiblings: 100, siblings: 200}}\r\n              // width={800}\r\n              // orientation={\"vertical\"}\r\n              // animated\r\n            />\r\n          </div>\r\n          }\r\n        </div>\r\n\r\n      }\r\n\r\n\r\n    </div>\r\n  )\r\n\r\n  // if (props.display === \"goal-step\") {\r\n  //   return (\r\n  //\r\n  //   )\r\n  // } else {\r\n  //\r\n  // }\r\n\r\n  // return (\r\n    // <div>\r\n    //   {JSON.stringify(props.currNode)}\r\n    //   <div style={{color: \"white\"}}>\r\n    //     {/*{JSON.stringify(props.graphData[2])}*/}\r\n    //     {props.currNode !== null && props.currNode.children &&\r\n    //       <div>\r\n    //         {props.currNode.children.map((child) => (\r\n    //           <div>\r\n    //             {child}\r\n    //           </div>\r\n    //         ))}\r\n    //       </div>\r\n    //     }\r\n    //   </div>\r\n    //   {/*{props.currNode !== null && props.currNode.children &&*/}\r\n    //   {/*  <div>*/}\r\n    //   {/*    {props.currNode.children.map((child) => (*/}\r\n    //   {/*      <div>*/}\r\n    //   {/*        Bruh*/}\r\n    //   {/*        {JSON.stringify(child)}*/}\r\n    //   {/*      </div>*/}\r\n    //   {/*    ))}*/}\r\n    //   {/*  </div>*/}\r\n    //   {/*}*/}\r\n    // </div>\r\n  // )\r\n}\r\n\r\n/* Redux */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchReducer.search,\r\n    currNode: state.graphReducer.currNode,\r\n    prevNodeStack: state.graphReducer.prevNodeStack,\r\n    parsedData: state.graphReducer.parsedData,\r\n    graphData: state.graphReducer.graphData,\r\n    display: state.navReducer.display\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    callSearch: (search) => dispatch(setSearch(search)),\r\n    setCurrNode: (search) => dispatch(setCurrNode(search)),\r\n    selectChild: (i) => dispatch(selectChild(i)),\r\n    goBack: () => dispatch(goBack())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View)\r\n"]},"metadata":{},"sourceType":"module"}