{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ricky\\\\Desktop\\\\School\\\\Research\\\\NLP\\\\WikiHow\\\\visualizer\\\\src\\\\views\\\\View.js\";\nimport React from \"react\";\nimport { setSearch } from \"../application/actions/Search\";\nimport { goBack, selectChild, setCurrNode } from \"../application/actions/Graph\";\nimport { connect } from \"react-redux\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport GridLines from 'react-gridlines';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction View(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [JSON.stringify(props.currNode), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"white\"\n      },\n      children: props.parsedData[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this) // <div style={{height: \"100%\", flex: 1}}>\n  //\n  //\n  //\n  //   <div style={{display: \"flex\", flex: 1, height: \"100%\"}}>\n  //\n  //\n  //\n  //     <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n  //\n  //       {props.prevNodeStack.length > 0 &&\n  //       <div\n  //         onClick={() => props.goBack()}\n  //         className={\"backButton\"}\n  //       >\n  //         <ChevronLeftIcon style={{color: \"white\"}}/>\n  //       </div>\n  //       }\n  //\n  //\n  //       {props.currNode !== null && typeof props.currNode !== \"string\" &&\n  //         <div\n  //           style={{\n  //             // backgroundColor: \"#2b56d2\",\n  //             backgroundColor: \"rgb(6,98,191)\",\n  //             padding: 15, borderRadius: 50, color: \"white\"\n  //           }}\n  //         >{props.currNode == null ? \"null\" : props.currNode.goal}</div>\n  //       }\n  //     </div>\n  //\n  //     <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n  //       <div>{\n  //         props.currNode !== null && typeof(props.currNode) !== \"string\" &&\n  //         <div>{props.currNode.steps.map((step, index) => (\n  //           <div style={{display: \"flex\", alignItems: \"center\"}}>\n  //             <div\n  //               style={{backgroundColor: \"rgb(6,98,191)\", padding: 15, borderRadius: 50, color: \"white\", margin: 10}}\n  //             >{step.goal}</div>\n  //\n  //             {step.steps.length > 0 &&\n  //               <div\n  //                 className={\"plusButton\"}\n  //                 onClick={() => props.selectChild(index)}\n  //               >\n  //                 <AddIcon style={{color: \"white\"}}/>\n  //               </div>\n  //             }\n  //           </div>\n  //         ))}</div>\n  //       }</div>\n  //     </div>\n  //   </div>\n  //\n  // </div>\n  ;\n}\n/* Redux */\n\n\n_c = View;\n\nconst mapStateToProps = state => {\n  return {\n    search: state.searchReducer.search,\n    currNode: state.graphReducer.currNode,\n    prevNodeStack: state.graphReducer.prevNodeStack,\n    parsedData: state.graphReducer.parsedData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    callSearch: search => dispatch(setSearch(search)),\n    setCurrNode: search => dispatch(setCurrNode(search)),\n    selectChild: i => dispatch(selectChild(i)),\n    goBack: () => dispatch(goBack())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(View);\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/Ricky/Desktop/School/Research/NLP/WikiHow/visualizer/src/views/View.js"],"names":["React","setSearch","goBack","selectChild","setCurrNode","connect","AddIcon","ChevronLeftIcon","GridLines","View","props","JSON","stringify","currNode","color","parsedData","mapStateToProps","state","search","searchReducer","graphReducer","prevNodeStack","mapDispatchToProps","dispatch","callSearch","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AACA,SAAQC,MAAR,EAAgBC,WAAhB,EAA6BC,WAA7B,QAA+C,8BAA/C;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,sBACE;AAAA,eACGC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,QAArB,CADH,eAEE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAAA,gBACGJ,KAAK,CAACK,UAAN,CAAiB,CAAjB;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAiBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEF;AAyED;AAED;;;KA5ESN,I;;AA6ET,MAAMO,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACE,aAAN,CAAoBD,MADvB;AAELL,IAAAA,QAAQ,EAAEI,KAAK,CAACG,YAAN,CAAmBP,QAFxB;AAGLQ,IAAAA,aAAa,EAAEJ,KAAK,CAACG,YAAN,CAAmBC,aAH7B;AAILN,IAAAA,UAAU,EAAEE,KAAK,CAACG,YAAN,CAAmBL;AAJ1B,GAAP;AAMD,CAPD;;AAQA,MAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,UAAU,EAAGN,MAAD,IAAYK,QAAQ,CAACtB,SAAS,CAACiB,MAAD,CAAV,CAD3B;AAELd,IAAAA,WAAW,EAAGc,MAAD,IAAYK,QAAQ,CAACnB,WAAW,CAACc,MAAD,CAAZ,CAF5B;AAGLf,IAAAA,WAAW,EAAGsB,CAAD,IAAOF,QAAQ,CAACpB,WAAW,CAACsB,CAAD,CAAZ,CAHvB;AAILvB,IAAAA,MAAM,EAAE,MAAMqB,QAAQ,CAACrB,MAAM,EAAP;AAJjB,GAAP;AAMD,CAPD;;AASA,eAAeG,OAAO,CAACW,eAAD,EAAkBM,kBAAlB,CAAP,CAA6Cb,IAA7C,CAAf","sourcesContent":["import React from \"react\"\r\nimport {setSearch} from \"../application/actions/Search\";\r\nimport {goBack, selectChild, setCurrNode} from \"../application/actions/Graph\";\r\nimport {connect} from \"react-redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport GridLines from 'react-gridlines';\r\n\r\nfunction View(props) {\r\n  return (\r\n    <div>\r\n      {JSON.stringify(props.currNode)}\r\n      <div style={{color: \"white\"}}>\r\n        {props.parsedData[2]}\r\n      </div>\r\n      {/*{props.currNode !== null && props.currNode.children &&*/}\r\n      {/*  <div>*/}\r\n      {/*    {props.currNode.children.map((child) => (*/}\r\n      {/*      <div>*/}\r\n      {/*        Bruh*/}\r\n      {/*        {JSON.stringify(child)}*/}\r\n      {/*      </div>*/}\r\n      {/*    ))}*/}\r\n      {/*  </div>*/}\r\n      {/*}*/}\r\n    </div>\r\n    // <div style={{height: \"100%\", flex: 1}}>\r\n    //\r\n    //\r\n    //\r\n    //   <div style={{display: \"flex\", flex: 1, height: \"100%\"}}>\r\n    //\r\n    //\r\n    //\r\n    //     <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n    //\r\n    //       {props.prevNodeStack.length > 0 &&\r\n    //       <div\r\n    //         onClick={() => props.goBack()}\r\n    //         className={\"backButton\"}\r\n    //       >\r\n    //         <ChevronLeftIcon style={{color: \"white\"}}/>\r\n    //       </div>\r\n    //       }\r\n    //\r\n    //\r\n    //       {props.currNode !== null && typeof props.currNode !== \"string\" &&\r\n    //         <div\r\n    //           style={{\r\n    //             // backgroundColor: \"#2b56d2\",\r\n    //             backgroundColor: \"rgb(6,98,191)\",\r\n    //             padding: 15, borderRadius: 50, color: \"white\"\r\n    //           }}\r\n    //         >{props.currNode == null ? \"null\" : props.currNode.goal}</div>\r\n    //       }\r\n    //     </div>\r\n    //\r\n    //     <div style={{flex: 1, display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\r\n    //       <div>{\r\n    //         props.currNode !== null && typeof(props.currNode) !== \"string\" &&\r\n    //         <div>{props.currNode.steps.map((step, index) => (\r\n    //           <div style={{display: \"flex\", alignItems: \"center\"}}>\r\n    //             <div\r\n    //               style={{backgroundColor: \"rgb(6,98,191)\", padding: 15, borderRadius: 50, color: \"white\", margin: 10}}\r\n    //             >{step.goal}</div>\r\n    //\r\n    //             {step.steps.length > 0 &&\r\n    //               <div\r\n    //                 className={\"plusButton\"}\r\n    //                 onClick={() => props.selectChild(index)}\r\n    //               >\r\n    //                 <AddIcon style={{color: \"white\"}}/>\r\n    //               </div>\r\n    //             }\r\n    //           </div>\r\n    //         ))}</div>\r\n    //       }</div>\r\n    //     </div>\r\n    //   </div>\r\n    //\r\n    // </div>\r\n  )\r\n}\r\n\r\n/* Redux */\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    search: state.searchReducer.search,\r\n    currNode: state.graphReducer.currNode,\r\n    prevNodeStack: state.graphReducer.prevNodeStack,\r\n    parsedData: state.graphReducer.parsedData\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    callSearch: (search) => dispatch(setSearch(search)),\r\n    setCurrNode: (search) => dispatch(setCurrNode(search)),\r\n    selectChild: (i) => dispatch(selectChild(i)),\r\n    goBack: () => dispatch(goBack())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(View)\r\n"]},"metadata":{},"sourceType":"module"}